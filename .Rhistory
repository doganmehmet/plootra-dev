blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
shinyAppDir(
system.file("https://plootra.com/shiny/apps/hello/", package="shiny"),
options = list(width = "100%", height = 700)
)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
blogdown:::new_post_addin()
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot = renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
library(shiny)
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
})
library(shiny)
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
})
library(shiny)
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
})
library(shiny)
sliderInput("bins", "Number of bins:", 30, min = 1, max = 50)
renderPlot({
x    = faithful[, 2]  # Old Faithful Geyser data
bins = seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
library(shiny)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown:::new_post_addin()
install.packages("JuliaCall ")
install.packages("JuliaCall")
library(JuliaCall)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
library(JuliaCall)
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
# import libraries
library(zoo)
library(xts)
# setting up working directory
setwd("C:/Users/ploot/OneDrive/R/")
library(PerformanceAnalytics)
library(tseries)
# other libraries
library(tidyverse)
library(lubridate)
#####################################################
# create a return data
return_assets <- tibble("bond"=rnorm(n=10, mean = 0.05, sd = 0.03), "equity" = rnorm(n=10, mean = 0.15, sd = 0.12))
return_assets <- xts(return_assets, order.by = seq(as.Date("2022/12/1"), as.Date("2022/12/10"), "days"))
View(return_assets)
View(return_assets)
View(return_assets)
# Create a grid
grid <- seq(from = 0, to = 1, by = 0.01)
# Initialize an empty vector for Sharpe ratios
vsharpe <- rep(NA, times = length(grid))
# Create a for loop to calculate Sharpe ratios
for(i in 1:length(grid)) {
weight <- grid[i]
preturns <- weight * return_assets$equity + (1 - weight) * return_assets$bond
vsharpe[i] <- SharpeRatio.annualized(preturns)
}
View(preturns)
preturns
1 + preturns$equity
(1 + preturns$equity)^365 -1
((1 + preturns$equity)^365) -1
((1 + preturns$equity)^12) -1
SharpeRatio.annualized(preturns)
preturns*sqrt(365)
# Create a for loop to calculate Sharpe ratios
for(i in 1:length(grid)) {
weight <- grid[i]
preturns <- weight * return_assets$equity + (1 - weight) * return_assets$bond
vsharpe[i] <- SharpeRatio(preturns)
}
?SharpeRatio
# Plot weights and Sharpe ratio
plot(grid, vsharpe, xlab = "Weights", ylab= "Ann. Sharpe ratio")
abline(v = grid[vsharpe == max(vsharpe)], lty = 3)
View(preturns)
View(preturns)
View(preturns)
mean(preturns) / std(preturns)
mean(preturns) / sd(preturns)
(mean(preturns) / sd(preturns)) * sqrt(252)
# Create a grid
grid <- seq(from = 0, to = 1, by = 0.01)
# Initialize an empty vector for Sharpe ratios
vsharpe <- rep(NA, times = length(grid))
# Create a for loop to calculate Sharpe ratios
for(i in 1:length(grid)) {
weight <- grid[i]
preturns <- weight * return_assets$equity + (1 - weight) * return_assets$bond
vsharpe[i] <- SharpeRatio.annualized(preturns)
}
mean(preturns) / sd(preturns)
(mean(preturns) / sd(preturns))*252
(mean(preturns) / sd(preturns))*sqrt(252)
(mean(preturns) / sd(preturns))*sqrt(365)
vsharpe
(mean(preturns) / sd(preturns))
(mean(preturns) / sd(preturns))*365
((mean(preturns)^(1/365) - 1) / sd(preturns)*sqrt(365)
)
(mean(preturns))^(1/365) - 1 / sd(preturns)*sqrt(365)
((mean(preturns))^(1/365) - 1) / sd(preturns)*sqrt(365)
View(preturns)
weight
((mean(1+ preturns))^(1/365) - 1) / sd(preturns)*sqrt(365)
preturns <- weight * return_assets$equity + (1 - weight) * return_assets$bond
preturns
mean(preturns)
sd(preturns)
mean(preturns) / sd(preturns)
mean((1 + preturns)^(1/365))
sd((1 + preturns)^(1/365))
1.000455 / sd((1 + preturns)^(1/365))
sd(preturns) * sqrt(565)
sd(preturns) * sqrt(365)
sd(preturns) * sqrt(252)
sd(preturns) * sqrt(12)
?SharpeRatio.annualized
mean((1 + preturns)^(1/252))
mean(preturns)
(1 + mean(preturns))^(1/252)
sd(preturns) * 252
sd(preturns) * sqrt(252)
mean(preturns)*365
mean(preturns)*252
mean(preturns)*252 / sd(preturns) * sqrt(252)
mean(preturns)*252 / sd(preturns) * sqrt(365)
mean(preturns)*365 / sd(preturns) * sqrt(365)
vsharpe
SharpeRatio.annualized(preturns)
# Create a for loop to calculate Sharpe ratios
for(i in 1:length(grid)) {
weight <- grid[i]
preturns <- weight * return_assets$equity + (1 - weight) * return_assets$bond
vsharpe[i] <- SharpeRatio(preturns)
}
vsharpe
mean(preturns) / sd(preturns)
grid[vsharpe == max(vsharpe)]
# Create a scatter plot
chart.Scatter(return_assets$bond, return_assets$equity, xlab = "bond returns", ylab = "equity returns", main = "bond-equity returns")
# Find the correlation
cor(return_assets$bond, return_assets$equity)
# Find and visualize the correlation using chart.Correlation
chart.Correlation(return_assets)
# Visualize the rolling estimates using chart.RollingCorrelation
chart.RollingCorrelation(return_assets$bond, return_assets$equity, width = 4)
# Create a vector of returns
means <- apply(return_assets, 2, "mean")
means
# Create a vector of standard deviation
sds <- apply(return_assets, 2, "sd")
sds
# Create a scatter plot
plot(sds, means)
text(sds, means, labels = colnames(returns), cex = 0.6)
abline(h = 0, lty = 6)
# Create a matrix with variances on the diagonal
diag_cov <- diag(sds^2)
diag_cov
# Create a correlation matrix of returns
cor_matrix <- cor(returns)
# Create a covariance matrix of returns
cov_matrix <- cov(means)
returns
matrix(means)
cor(means)
# Create a covariance matrix of returns
cov_matrix <- cov(returns_assets)
# Create a covariance matrix of returns
cov_matrix <- cov(return_assets)
# Create a correlation matrix of returns
cor_matrix <- cor(return_assets)
# Create a covariance matrix of returns
cov_matrix <- cov(return_assets)
cov_matrix
# Create a covariance matrix of returns
cov_matrix <- cov(return_assets)
cov_matrix
# Create a correlation matrix of returns
cor_matrix <- cor(return_assets)
cor_matrix
# Create a weight matrix w
weights <- c(0.5, 0.5)
w <- as.matrix(weights)
View(w)
w
clas(w)
class(w)
size(w)
dim(x)
dim(w)
# Create a matrix of returns
vmeans <- colMeans(return_assets)
mu <- as.matrix(vmeans)
vmenas
vmeans
mu
2
w
t(w)
# Calculate portfolio mean monthly returns
t(w) %*% mu
w
sqrt(t(w) %*% cov_matrix %*% w)
weights = [0.6, 0.4]
weights = c(0.6, 0.4)
covMatrix = matrix(0.000738889, 0.000538889; 0.000538889,0.00549889)
covMatrix = matrix(c(0.000738889, 0.000538889), c(0.000538889,0.00549889))
weights = c(0.6, 0.4)
cbind(seq(0.000738889, 0.000538889), seq(0.000538889, 0.00549889))
cbind(seq(0.000738889, 0.000538889), seq(0.000538889, 0.00549889))
rbind(seq(0.000738889, 0.000538889), seq(0.000538889, 0.00549889))
A = matrix(
# Taking sequence of elements
c(0.000738889, 0.000538889, 0.000538889, 0.00549889),
# No of rows
nrow = 2,
# No of columns
ncol = 2,
# By default matrices are in column-wise order
# So this parameter decides how to arrange the matrix
byrow = TRUE
)
A
A = matrix(
# Taking sequence of elements
c(0.000738889, 0.000538889, 0.000538889, 0.00549889),
# No of rows
nrow = 2,
# No of columns
ncol = 2,
# By default matrices are in column-wise order
# So this parameter decides how to arrange the matrix
byrow = TRUE
)
A
covMatrix = matrix(
c(0.000738889, 0.000538889, 0.000538889, 0.00549889),
nrow = 2,
ncol = 2,
byrow = TRUE
)
portVar = t(weights) * covMatrix * weights
diag(weights)
portVar = diag(weights) * covMatrix * weights
portStd = sqrt(portVar)
print("Portfolio Variance is: " portVar)
print("Portfolio Risk (Std) is: " portStd)
portVar = diag(weights) * covMatrix * weights
portStd = sqrt(portVar)
print("Portfolio Variance is: " portVar)
print("Portfolio Risk (Std) is: " portStd)
print("Portfolio Variance is: ", portVar)
print("Portfolio Risk (Std) is: ", portStd)
print(paste("Portfolio Variance is: ", portVar))
print(paste("Portfolio Variance is: ", portVar))
portVar
portVar = t(weights) %*% covMatrix %*% weights
portStd = sqrt(portVar)
print(paste("Portfolio Variance is: ", portVar))
print("Portfolio Risk (Std) is: ", portStd)
print(paste("Portfolio Variance is: ", portVar))
print(paste("Portfolio Risk (Std) is: ", portStd))
covMatrix = matrix(
c(0.000738889, 0.000538889, 0.000538889, 0.00549889),
# nrow = 2,
# ncol = 2,
# byrow = TRUE
)
portVar = t(weights) %*% covMatrix %*% weights
portStd = sqrt(portVar)
covMatrix
covMatrix = matrix(
c(0.000738889, 0.000538889, 0.000538889, 0.00549889),
nrow = 2,
ncol = 2,
byrow = TRUE
)
portVar = t(weights) %*% covMatrix %*% weights
portStd = sqrt(portVar)
print(paste("Portfolio Variance is: ", portVar))
print(paste("Portfolio Risk (Std) is: ", portStd))
A = matrix(
c(1, 2, 3, 4),
nrow = 2,
ncol = 2,
byrow = TRUE
)
A = matrix(
c(1, 2, 3, 4),
nrow = 2,
ncol = 2,
byrow = TRUE
)
B = matrix(
c(5, 10, 15, 20),
nrow = 2,
ncol = 2,
byrow = TRUE
)
A
B
V = c(5, 10)
V
t(v)
t(V)
A + B
A %+% B
A - B
A * B
A %*% B
3 * A
3A
V''
V'
t(V) * A
t(V) %*% A
''
t(V) %*% A
t(V) * A
A * V
A %*% V
V = c(5, 10)
A %*% V
A * V
A %*% V
blogdown::serve_site()
blogdown:::new_post_addin()
options()
options(knitr)
options("knitr")
blogdown::build_site()
